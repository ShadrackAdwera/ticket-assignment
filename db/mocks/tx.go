// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ShadrackAdwera/ticket-assignment/db/sqlc (interfaces: TxStore)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/ShadrackAdwera/ticket-assignment/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockTxStore is a mock of TxStore interface.
type MockTxStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxStoreMockRecorder
}

// MockTxStoreMockRecorder is the mock recorder for MockTxStore.
type MockTxStoreMockRecorder struct {
	mock *MockTxStore
}

// NewMockTxStore creates a new mock instance.
func NewMockTxStore(ctrl *gomock.Controller) *MockTxStore {
	mock := &MockTxStore{ctrl: ctrl}
	mock.recorder = &MockTxStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStore) EXPECT() *MockTxStoreMockRecorder {
	return m.recorder
}

// AssignTicketToAgent mocks base method.
func (m *MockTxStore) AssignTicketToAgent(arg0 context.Context, arg1 db.AssignTicketToAgentParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTicketToAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTicketToAgent indicates an expected call of AssignTicketToAgent.
func (mr *MockTxStoreMockRecorder) AssignTicketToAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTicketToAgent", reflect.TypeOf((*MockTxStore)(nil).AssignTicketToAgent), arg0, arg1)
}

// CreateAgent mocks base method.
func (m *MockTxStore) CreateAgent(arg0 context.Context, arg1 db.CreateAgentParams) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockTxStoreMockRecorder) CreateAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockTxStore)(nil).CreateAgent), arg0, arg1)
}

// CreateAssignment mocks base method.
func (m *MockTxStore) CreateAssignment(arg0 context.Context, arg1 db.CreateAssignmentParams) (db.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssignment", arg0, arg1)
	ret0, _ := ret[0].(db.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssignment indicates an expected call of CreateAssignment.
func (mr *MockTxStoreMockRecorder) CreateAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssignment", reflect.TypeOf((*MockTxStore)(nil).CreateAssignment), arg0, arg1)
}

// CreateTicket mocks base method.
func (m *MockTxStore) CreateTicket(arg0 context.Context, arg1 db.CreateTicketParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockTxStoreMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockTxStore)(nil).CreateTicket), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockTxStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockTxStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockTxStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAgent mocks base method.
func (m *MockTxStore) DeleteAgent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgent indicates an expected call of DeleteAgent.
func (mr *MockTxStoreMockRecorder) DeleteAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockTxStore)(nil).DeleteAgent), arg0, arg1)
}

// DeleteAssignment mocks base method.
func (m *MockTxStore) DeleteAssignment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssignment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssignment indicates an expected call of DeleteAssignment.
func (mr *MockTxStoreMockRecorder) DeleteAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssignment", reflect.TypeOf((*MockTxStore)(nil).DeleteAssignment), arg0, arg1)
}

// DeleteTicket mocks base method.
func (m *MockTxStore) DeleteTicket(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockTxStoreMockRecorder) DeleteTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockTxStore)(nil).DeleteTicket), arg0, arg1)
}

// GetAgent mocks base method.
func (m *MockTxStore) GetAgent(arg0 context.Context, arg1 int64) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockTxStoreMockRecorder) GetAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockTxStore)(nil).GetAgent), arg0, arg1)
}

// GetAssignment mocks base method.
func (m *MockTxStore) GetAssignment(arg0 context.Context, arg1 int64) (db.GetAssignmentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignment", arg0, arg1)
	ret0, _ := ret[0].(db.GetAssignmentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignment indicates an expected call of GetAssignment.
func (mr *MockTxStoreMockRecorder) GetAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignment", reflect.TypeOf((*MockTxStore)(nil).GetAssignment), arg0, arg1)
}

// GetAssignmentForUpdate mocks base method.
func (m *MockTxStore) GetAssignmentForUpdate(arg0 context.Context, arg1 int64) (db.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignmentForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignmentForUpdate indicates an expected call of GetAssignmentForUpdate.
func (mr *MockTxStoreMockRecorder) GetAssignmentForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignmentForUpdate", reflect.TypeOf((*MockTxStore)(nil).GetAssignmentForUpdate), arg0, arg1)
}

// GetAssignments mocks base method.
func (m *MockTxStore) GetAssignments(arg0 context.Context, arg1 db.GetAssignmentsParams) ([]db.GetAssignmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignments", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAssignmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignments indicates an expected call of GetAssignments.
func (mr *MockTxStoreMockRecorder) GetAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignments", reflect.TypeOf((*MockTxStore)(nil).GetAssignments), arg0, arg1)
}

// GetTicket mocks base method.
func (m *MockTxStore) GetTicket(arg0 context.Context, arg1 int64) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockTxStoreMockRecorder) GetTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockTxStore)(nil).GetTicket), arg0, arg1)
}

// GetTicketForUpdate mocks base method.
func (m *MockTxStore) GetTicketForUpdate(arg0 context.Context, arg1 int64) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketForUpdate indicates an expected call of GetTicketForUpdate.
func (mr *MockTxStoreMockRecorder) GetTicketForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketForUpdate", reflect.TypeOf((*MockTxStore)(nil).GetTicketForUpdate), arg0, arg1)
}

// GetTickets mocks base method.
func (m *MockTxStore) GetTickets(arg0 context.Context, arg1 db.GetTicketsParams) ([]db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", arg0, arg1)
	ret0, _ := ret[0].([]db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickets indicates an expected call of GetTickets.
func (mr *MockTxStoreMockRecorder) GetTickets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*MockTxStore)(nil).GetTickets), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockTxStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTxStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTxStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockTxStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockTxStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockTxStore)(nil).GetUserByEmail), arg0, arg1)
}

// ListAgents mocks base method.
func (m *MockTxStore) ListAgents(arg0 context.Context, arg1 db.ListAgentsParams) ([]db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgents", arg0, arg1)
	ret0, _ := ret[0].([]db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgents indicates an expected call of ListAgents.
func (mr *MockTxStoreMockRecorder) ListAgents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgents", reflect.TypeOf((*MockTxStore)(nil).ListAgents), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockTxStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockTxStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockTxStore)(nil).ListUsers), arg0, arg1)
}

// NewTicketAssignment mocks base method.
func (m *MockTxStore) NewTicketAssignment(arg0 context.Context, arg1 db.CreateAssignmentParams) (db.NewTicketAssignmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTicketAssignment", arg0, arg1)
	ret0, _ := ret[0].(db.NewTicketAssignmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTicketAssignment indicates an expected call of NewTicketAssignment.
func (mr *MockTxStoreMockRecorder) NewTicketAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTicketAssignment", reflect.TypeOf((*MockTxStore)(nil).NewTicketAssignment), arg0, arg1)
}

// UpdateAgent mocks base method.
func (m *MockTxStore) UpdateAgent(arg0 context.Context, arg1 db.UpdateAgentParams) (db.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", arg0, arg1)
	ret0, _ := ret[0].(db.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockTxStoreMockRecorder) UpdateAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockTxStore)(nil).UpdateAgent), arg0, arg1)
}

// UpdateAssignment mocks base method.
func (m *MockTxStore) UpdateAssignment(arg0 context.Context, arg1 db.UpdateAssignmentParams) (db.Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssignment", arg0, arg1)
	ret0, _ := ret[0].(db.Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssignment indicates an expected call of UpdateAssignment.
func (mr *MockTxStoreMockRecorder) UpdateAssignment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignment", reflect.TypeOf((*MockTxStore)(nil).UpdateAssignment), arg0, arg1)
}

// UpdateTicket mocks base method.
func (m *MockTxStore) UpdateTicket(arg0 context.Context, arg1 db.UpdateTicketParams) (db.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", arg0, arg1)
	ret0, _ := ret[0].(db.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockTxStoreMockRecorder) UpdateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockTxStore)(nil).UpdateTicket), arg0, arg1)
}
