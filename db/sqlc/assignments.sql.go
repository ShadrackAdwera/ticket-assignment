// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: assignments.sql

package db

import (
	"context"
)

const createAssignment = `-- name: CreateAssignment :one
INSERT INTO assignments (
ticket_id, agent_id, status
) VALUES (
  $1, $2, $3
)
RETURNING id, ticket_id, agent_id, status, assigned_at
`

type CreateAssignmentParams struct {
	TicketID int64  `json:"ticket_id"`
	AgentID  int64  `json:"agent_id"`
	Status   string `json:"status"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, createAssignment, arg.TicketID, arg.AgentID, arg.Status)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.AgentID,
		&i.Status,
		&i.AssignedAt,
	)
	return i, err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignments
WHERE id = $1
`

func (q *Queries) DeleteAssignment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAssignment, id)
	return err
}

const getAssignment = `-- name: GetAssignment :one
SELECT id, ticket_id, agent_id, status, assigned_at FROM assignments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAssignment(ctx context.Context, id int64) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, getAssignment, id)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.AgentID,
		&i.Status,
		&i.AssignedAt,
	)
	return i, err
}

const getAssignmentForUpdate = `-- name: GetAssignmentForUpdate :one
SELECT id, ticket_id, agent_id, status, assigned_at FROM assignments
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetAssignmentForUpdate(ctx context.Context, id int64) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, getAssignmentForUpdate, id)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.AgentID,
		&i.Status,
		&i.AssignedAt,
	)
	return i, err
}

const getAssignments = `-- name: GetAssignments :many
SELECT id, ticket_id, agent_id, status, assigned_at FROM assignments
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAssignmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAssignments(ctx context.Context, arg GetAssignmentsParams) ([]Assignment, error) {
	rows, err := q.db.QueryContext(ctx, getAssignments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assignment
	for rows.Next() {
		var i Assignment
		if err := rows.Scan(
			&i.ID,
			&i.TicketID,
			&i.AgentID,
			&i.Status,
			&i.AssignedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssignment = `-- name: UpdateAssignment :one
UPDATE assignments SET status = $2
WHERE id = $1 RETURNING id, ticket_id, agent_id, status, assigned_at
`

type UpdateAssignmentParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRowContext(ctx, updateAssignment, arg.ID, arg.Status)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.AgentID,
		&i.Status,
		&i.AssignedAt,
	)
	return i, err
}
