// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tickets.sql

package db

import (
	"context"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO tickets (
  title, description, status
) VALUES (
  $1, $2, $3
)
RETURNING id, title, description, status, assigned_to, created_at
`

type CreateTicketParams struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      string `json:"status"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket, arg.Title, arg.Description, arg.Status)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.AssignedTo,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM tickets
WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTicket, id)
	return err
}

const getTicket = `-- name: GetTicket :one
SELECT id, title, description, status, assigned_to, created_at FROM tickets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTicket(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.AssignedTo,
		&i.CreatedAt,
	)
	return i, err
}

const getTicketForUpdate = `-- name: GetTicketForUpdate :one
SELECT id, title, description, status, assigned_to, created_at FROM tickets
WHERE id = $1 LIMIT 1 
FOR NO KEY UPDATE
`

func (q *Queries) GetTicketForUpdate(ctx context.Context, id int64) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicketForUpdate, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.AssignedTo,
		&i.CreatedAt,
	)
	return i, err
}

const getTickets = `-- name: GetTickets :many
SELECT id, title, description, status, assigned_to, created_at FROM tickets
ORDER BY id
`

func (q *Queries) GetTickets(ctx context.Context) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, getTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ticket
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.AssignedTo,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE tickets SET status = $2
WHERE id = $1 RETURNING id, title, description, status, assigned_to, created_at
`

type UpdateTicketParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, updateTicket, arg.ID, arg.Status)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.AssignedTo,
		&i.CreatedAt,
	)
	return i, err
}
