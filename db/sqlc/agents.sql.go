// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: agents.sql

package db

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (
  name, status
) VALUES (
  $1, $2
)
RETURNING id, name, status, created_at
`

type CreateAgentParams struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent, arg.Name, arg.Status)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents
WHERE id = $1
`

func (q *Queries) DeleteAgent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAgent, id)
	return err
}

const getAgent = `-- name: GetAgent :one
SELECT id, name, status, created_at FROM agents
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgent(ctx context.Context, id int64) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAgents = `-- name: ListAgents :many
SELECT id, name, status, created_at FROM agents
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAgentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAgents(ctx context.Context, arg ListAgentsParams) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, listAgents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agents SET status = $2
WHERE id = $1 RETURNING id, name, status, created_at
`

type UpdateAgentParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, updateAgent, arg.ID, arg.Status)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
